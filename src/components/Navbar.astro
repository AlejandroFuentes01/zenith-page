---
import { translations } from "../i18n/translations";
import type { Language } from "../i18n/translations";
import ContactButton from "./ContactButton.astro";

const menuItems = [
  { text: translations.en.nav.home, href: "/" },
  { text: translations.en.nav.services, href: "/#services" },
  { text: translations.en.nav.whyUs, href: "/#why-us" },
  { text: translations.en.nav.pricing, href: "/#pricing" },
];

const currentPath = Astro.url.pathname;
---

<nav class="fixed w-full z-[100] py-6 bg-white shadow-sm will-change-transform" id="navbar">
  <div class="container mx-auto px-4 flex justify-between items-center">
    <a href="/" class="flex items-center gap-1 relative z-[110]">
      <img
        src="/Zenith.webp"
        alt="Zenith Logo"
        class="h-8 w-8 object-contain"
        loading="eager"
        decoding="async"
      />
      <span class="text-base font-bold">enith dev8</span>
    </a>

    {/* Desktop Menu */}
    <div class="hidden md:flex items-center gap-8">
      {
        menuItems.map((item) => (
          <a
            href={item.href}
            class="text-gray-600 hover:text-primary transition-colors nav-link"
            data-key={item.text.toLowerCase()}
          >
            {item.text}
          </a>
        ))
      }

      {/* Language Selector */}
      <div class="relative group">
        <button
          class="flex items-center gap-2 text-gray-600 hover:text-primary"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"
            ></path>
          </svg>
          <span id="current-language">EN</span>
        </button>
        <div
          class="absolute right-0 mt-2 py-2 w-24 bg-white rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200"
        >
          <button
            class="w-full px-4 py-2 text-left text-gray-600 hover:text-primary hover:bg-gray-50 language-option"
            data-lang="en"
          >
            English
          </button>
          <button
            class="w-full px-4 py-2 text-left text-gray-600 hover:text-primary hover:bg-gray-50 language-option"
            data-lang="es"
          >
            Español
          </button>
        </div>
      </div>

      <ContactButton/>
    </div>

    {/* Mobile Menu Button */}
    <button
      id="mobile-menu-button"
      class="md:hidden relative z-[110] p-2 -mr-2 text-gray-600 hover:text-primary transition-colors"
      aria-label="Toggle menu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>

    {/* Mobile Menu */}
    <div
      id="mobile-menu"
      class="fixed inset-0 bg-white transform translate-x-full transition-all duration-300 ease-in-out md:hidden z-[90]"
    >
      <div class="min-h-screen px-4 pt-28 flex flex-col bg-white">
        <div class="flex flex-col space-y-8">
          {
            menuItems.map((item) => (
              <a
                href={item.href}
                class="text-2xl font-semibold text-gray-800 hover:text-primary transition-colors mobile-nav-link"
                data-key={item.text.toLowerCase()}
              >
                {item.text}
              </a>
            ))
          }
          <a
            href="/contact"
            class="text-2xl font-semibold text-gray-800 hover:text-primary transition-colors mobile-nav-link"
            data-key="contact"
          >
            {translations.en.nav.contact}
          </a>

          {/* Mobile Language Selector */}
          <div class="pt-4 border-t border-gray-100">
            <p class="text-sm text-gray-500 mb-3">Select Language</p>
            <div class="flex gap-4">
              <button
                class="px-4 py-2 text-sm text-gray-600 hover:text-primary bg-gray-50 rounded-lg language-option"
                data-lang="en"
              >
                English
              </button>
              <button
                class="px-4 py-2 text-sm text-gray-600 hover:text-primary bg-gray-50 rounded-lg language-option"
                data-lang="es"
              >
                Español
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  import type { Language } from "../i18n/translations";
import { translations } from "../i18n/translations";
import { currentLanguage, setLanguage } from "../store/language";

  function setupMobileMenu() {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    let isMenuOpen = false;

    menuButton?.addEventListener("click", () => {
      isMenuOpen = !isMenuOpen;

      if (mobileMenu) {
        mobileMenu.classList.toggle("translate-x-full");
        document.body.style.overflow = isMenuOpen ? "hidden" : "";
      }

      if (menuButton) {
        const svg = menuButton.querySelector("svg");
        if (svg) {
          svg.innerHTML = isMenuOpen
            ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />'
            : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
        }
      }
    });

    // Close mobile menu when clicking a link
    const mobileLinks = document.querySelectorAll(".mobile-nav-link");
    mobileLinks.forEach((link) => {
      link.addEventListener("click", () => {
        isMenuOpen = false;
        if (mobileMenu) {
          mobileMenu.classList.add("translate-x-full");
          document.body.style.overflow = "";
        }
        const svg = menuButton?.querySelector("svg");
        if (svg) {
          svg.innerHTML =
            '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
        }
      });
    });

    // Close menu on window resize if open
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 768 && isMenuOpen) {
        isMenuOpen = false;
        if (mobileMenu) {
          mobileMenu.classList.add("translate-x-full");
          document.body.style.overflow = "";
        }
        const svg = menuButton?.querySelector("svg");
        if (svg) {
          svg.innerHTML =
            '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />';
        }
      }
    });
  }

  function setupLanguageSelector() {
    const initialLang = (localStorage.getItem("preferred-language") ||
      "en") as Language;
    updateContent(initialLang);

    document.querySelectorAll(".language-option").forEach((option) => {
      option.addEventListener("click", (e) => {
        const lang = (e.currentTarget as HTMLElement).getAttribute(
          "data-lang",
        ) as Language;
        if (lang) {
          setLanguage(lang);
          updateContent(lang);
        }
      });
    });

    currentLanguage.subscribe(updateContent);
  }

  function updateContent(lang: Language) {
    document.querySelectorAll(".nav-link").forEach((link) => {
      const key = link.getAttribute("data-key");
      if (
        key &&
        translations[lang].nav[
          key as keyof (typeof translations)[typeof lang]["nav"]
        ]
      ) {
        link.textContent =
          translations[lang].nav[
            key as keyof (typeof translations)[typeof lang]["nav"]
          ];
      }
    });

    const currentLangElement = document.getElementById("current-language");
    if (currentLangElement) {
      currentLangElement.textContent = lang.toUpperCase();
    }
  }

  // Handle smooth scrolling for anchor links
  function setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", function (e) {
        e.preventDefault();
        const href = this.getAttribute("href");
        if (!href) return;

        const target = document.querySelector(href);
        if (!target) return;

        const navbarHeight = document.querySelector("nav")?.offsetHeight || 0;
        const targetPosition =
          target.getBoundingClientRect().top +
          window.pageYOffset -
          navbarHeight;

        window.scrollTo({
          top: targetPosition,
          behavior: "smooth",
        });
      });
    });
  }

  document.addEventListener("DOMContentLoaded", () => {
    setupMobileMenu();
    setupLanguageSelector();
    setupSmoothScroll();
  });
</script>

<style>
  .container {
    max-width: 1280px;
  }

  /* Navbar shadow and background */
  nav {
    box-shadow:
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px 0 rgba(0, 0, 0, 0.06);
  }

  /* Mobile menu transition */
  #mobile-menu {
    transition: transform 0.3s ease-in-out;
  }

  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    #mobile-menu {
      transition: none;
    }
  }

  /* Language selector transitions */
  .group:hover .group-hover\:opacity-100 {
    transition-delay: 0.1s;
  }
</style>
